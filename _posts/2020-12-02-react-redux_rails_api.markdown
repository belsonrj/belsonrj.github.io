---
layout: post
title:      "React-Redux/Rails API"
date:       2020-12-02 21:26:38 +0000
permalink:  react-redux_rails_api
---


This final portfolio project put all of the skills I've aquired to the ultimate test. I was able to create a working app using multiple frameworks, and utilize a myriad of tools available to me. I had a specific vision for this project that turned out to be a bit overly ambitious when taking into account the difficulty of successfully implementing a login/signup feature. This proved to be a huge thorn in my side when trying to stay within the confines of the time alotted to complete this final project. I had successfully added a login/signup feature and my models and realtionships were working as expected on my backend, but I kept running into bugs on the front end when trying to maintain updates in state and props.  Even though I had to scrap this feature, I do plan on revisiting this issue in the future to acheive my orignal vision concerning this application. The project felt about 90% complete, but it just wasn't complete enough to be considered a finished project. If anything, this proved to be a lesson in tenacity over effiency. Being able to strike a balance between the two is a valuable skill, especially in this field. 

However, I was able to successfully implement my has many through for my Event and Artist models. I wanted to create an app that can not only map the users attended events, but also dynamically store each artist that was seen at each event. The secondary main feature of adding an artist to an event would be to create that artist for the user to access in their artist index. An important method that goes along with this secondary main feature hinged on the ability to add and artist to multiple events without creating duplicate models for said artist. Without this working method one of the main purposes of this app is useless. I had to create a dynamic create method in my artists controller to check my database for a name match. If the artist name matched an existing artist in the database, that artist would be added to the event via my join table which successfully created the relationship between artist and event in ActiveRecord. This method was relatively simple to implement. Now, an additional feature to go along with this artist create method involved one of the attributes for my Artist model; the times_seen attribute. This attribute kept track of the number of times a user has seen this artist live. An important part of a collection of artists is being able to keep track of the number of times you've seen them. Without this attribute the Artist model isn't very dynamic other than being able to see the Artist's collection of Events. So, I had to figure out a way to increase this attribute upon every trigger of the create method. I wasn't exactly sure how this could be configured, but I knew there must be a way to increase an attribute numerically. I acheived this by incorporating the update_attribute method. Triggering this method while adding one increment to the attribute successfuly added this feature to the application. I was able to get this dynamic create method working without much resistence by utilizing skills and reasoning aquired through hours and hours of practice.
